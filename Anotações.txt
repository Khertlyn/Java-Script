Linguagem interpretada

Para comentar uma linha //
Para comentar mais de uma linha utilizar 
/* */ atalho ctrl+/

node JS

sintaxe declarar função
function soma(a, b){
	console.log(a + b); //usado para visualizar resultado
	return a + b; //usado para manipular resultado
}
soma(3,5);

para executar um arquivo no terminal utilizar node

arquitetura é como está desenhado a estrutura

assets = pasta de arquivos não html (ex. js e css)

DOM - Estrutura dos elementos dentro da janela (Document Object Model)


sintaxe e operadores
% resto da operação
** exponencial
++ incrementar
-- decrementar
Comparação
== pergunta se o valor é igual
=== mesmo valor e mesmo tipo
!=diferente
!== valor e tipo diferente
>maior que 

usados em condições
&& e lógico
|| ou (qualquer um dos dois)
! não

sintaxe
if(condition)
	statement;
else
	statement;


algumas padronizações de variáveis
camelCase usado para classes e variáveis
UPPER_CASE_SNAKE_CASE - declarar constantes

let só tem escopo de bloco. é necessário declarar a variável antes de utiliza-la

var é utilizado para declarar uma variável global
const é utilizado para declarar valores que não serão alterados
const FIRST_NAME = "Khertlyn"

Estruturas de dados
Tipagem dinâmica

Strings 
ex: let fullName = 'nome completo: ${firstName} ${LastName};
"\n" quebra linha

concatenar
concatenado = firstName.concat(lastName)

métodos **** pesquisar melhor
length = 
split = ("") separa todas as letras , (" ")separa onde aparece espaço
variavel.includes("tudo") = verifica se a palavra existe na variavel
variavel.replace substitui o primeiro valor pelo segundo
let "nomeVariavel" = "variavel.replace(",","!") atribui


números
Math.floor(variavel) = Arredonda para baixo
Math.ceil(variavel) = Arredonda para baixo

para lidar com % utiliza string para exibir número em porcentagem deve utilizar concatenação

booleans
sempre que faz comparação retorna um valor booleano
ex.: let validation = 3 === 0 
validation false
se colocar uma ! antes vai retornar valor oposto

Arrays
Lista iterável de elementos
ex. : let array = []

funciona com vários métodos
array.push(3) acrescenta o número 3 no array
array.pop(3) tira o último elemento no array


Objetos

let person = {aqui dentro posso declarar chaves e valores ex: name:"Julia" age:20};
person.adress = "Rua Visconde de Maua"
object.values(person)
object.keys(person)

Empty = somente inicializou o valor
null = valor nao existe, não é false nem true
Undefined = 


Funções
Estrutura
function nome(parametros){

return; // valor de retorno, a função para de ser executada
}

função auto invocável declara dentro de parenteses e coloca ()depois que pode ser colocado valores. Não pode receber parâmetros
Parâmetros
valores padrão
ex.:
(
function(a, b) {
return a + b;
}
)(1, 2);
console.log(soma3)



Spread: uma forma de lidar separadamente com elementos
function sum(x, y, z) {
return x + y + z;
}
const numbers = [1,2,3];
console.log(sum(...numbers));

Spread: uma forma de lidar separadamente com elementos
function sum(x, y, z) {
return x + y + z;
}
const numbers = [1,2,3];
console.log(sum(...numbers));

rest: Combina os argumentos em um array
function confereTamanho(...args) {
console.log(args.length)
}
confereTamanho()
confereTamanho(1, 2)
confereTamanho(3, 4, 5)

Object destruturing
entre chaves {}, podemos filtrar apenas os dados que nos interessam em um objeto

If / Else
Switch/case (compara tipo e valor ===)
Ex.:
Funtion getAnimal(id) {
switch(id) {
case 1:
return "cão";
case 2:
return "gato";
case 3:
return "cavalo";
default
return "peixe";

for
Loop dentro de elementos iteráveis (arrays, strings)

forin
Loope entre propriedades enumeráveis de um objeto

while
Executa instrução até que a condição se torne falsa

do while
Executa instrução até que a condição se torne falsa
mas executa pelo menos uma vez

this
Sempre que uma função está dentro de um objeto é chamado de método
diferença entre apply e call
soma.apply(myObj,[1,5]); nesse posso passar argumentos dentro de array

bind
clona a estrutura da função e aplica o valor do objeto passado como parametro
let nomedafuncao = nomedafuncaoaserclonada.bind({ nome: 'Bruno' });


sintaxe


Estrutura myMAP
const myMap = new Map()

métodos
myMap.set('apple', 'fruit'); adiciona o valor fruit a chave apple
myMap.get('apple'); retorna o valor da chave apple
myMap.delete('apple');deleta

diferença entre Map e Objeto
Maps podem ter chave de qualquer tipo Ex: número , string
Maps possuem a propriedade length
Maps são mais fáceis de iterar
utilizado quando o valor das chaves é desconhecido
Os valores do Map tem o mesmo tipo

set coleção chaveada
estruturas que armazenam valores únicos
métodos possíveis : .add , .has, .delete, .size.


MÉTODOS maps , filter e reduce

Map
cria um novo array, não modifica o original e realiza opeçãoes em ordem.
sintaxe
array.map(callbak, thisArg(opcional))
const array = [1, 2, 3 ,4 ,5];
array.map((item) => item*2;
comparação Map vs forEach

Filter
Cria um novo array
sintaxe
array.filter(callbak, thisArg(opcional))
const frutas = ['maça fuji, 'maça verde', 'laranja'];
array.filter((fruta) => fruta.includes('maça'))

Reduce
não retorna um novo array, retorna um valor único;
sintaxe
array.reduce(callbackFn, initialValue(opcional))
const callbackFn = function(accumulator, currentValue, index, array) { do someting
}
array.reduce(callbackFn, initialValue)

Erros
function validaArray(arr, num) {
    try{
    if(!arr && !num) throw new ReferenceError("envie os parâmetros");
    
    if(typeof arr !== 'object') 
        throw new TypeError('Array precisa ser objeto');
    
    if(typeof num !== 'number') 
        throw new TypeError('Num precisa ser número');
    
    if (arr.length !== num) 
        throw new RangeError ('Tamanho inválido');
    
        return arr;
    }
    catch(e){
        if(e instanceof ReferenceError) {
            console.log('Este erro é um reference error');
            console.log(e.name);
            console.log(e.message);
        }
        else if(e instanceof TypeError) {
            console.log('Este erro é um type error');
            console.log(e.name);
            console.log(e.message);
        }
        else if(e instanceof RangeError) {
            console.log('Este erro é um range error');
            console.log(e.name);
            console.log(e.message);
        }
        else {
            console.log('tipo de erro não esperado' + e);
        }
    }
}
arr = [1, 2, 3, 4, 5];
num = 5;
console.log(validaArray(arr, num));

Assincronissidade
async function resolvePromise(){
	const myPromise = new Promise((resolve, reject) => {
		window.setTimeout(() => {
			resolve('Resolvida');
		},3000);
	});
	let result;
	
	try {
	result = await myPromise
		.then((result) => result + 'passando pelo then')
		.then((result) = result + 'e agora acabou')
	}
	catch(err) {
		result = err.message;
	}
	return result;
}

APIS = Aplication Programming Interface
JSON = JavaScript Object Notation
fetch retorna uma promissa - preciso utilizar await
Operações no banco

orientação a Objetos
abstração = isolar aspecto determinado
herança=
encapsulamento=
Polimorfismo=

OOJS
Protótipos esqueleto de todos os objetos
syntatic sugar = feita para facilitar a escrita
o java script não possui classes nativamente


Módulo























